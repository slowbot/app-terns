$button-padding: 0.85em 1em !default;
$button-margin: 0 $global-padding $global-padding 0 !default;
$button-style: solid !default;
$button-background: $primary-color !default;
$button-color: auto !default;
$button-radius: 6px !default;
$button-sizes: (
  tiny: 0.8,
  small: 0.9,
  medium: 1,
  large: 1.2,
) !default;
$button-font-size: 0.9rem !default;
$button-opacity-disabled: 0.8 !default;
$button-tag-selector: true !default;

%button {
  display: inline-block;
  border: 0;
  text-align: center;
  line-height: 1;
  cursor: pointer;
  -webkit-appearance: none;
  -webkit-font-smoothing: antialiased;
  transition: background 0.25s ease-out;

  padding: $button-padding;
  margin: $button-margin;
  font-weight: $button-font-size;
  border-radius: $button-radius;

  // Dropdown arrow
  // TODO: Change to class and mixin because now the toggle is 'fa-open' which is too generic
  &[data-popup-toggle] {
    position: relative;
    padding-right: 2em; // Placeholder

    &::after {
      @include css-triangle(6px, black, top);
      position: absolute;
      right: 0.7em;
      top: 50%;
      margin-top: -3px;
    }
  }
}

%button-disabled {
  opacity: $button-opacity-disabled;
  pointer-events: none;
}

@mixin button-size($size: medium, $expand: false) {
  $size: $button-font-size * map-get($button-sizes, $size);
  font-size: $size;

  @if $expand {
    @include button-expand;
  }
}
@mixin button-expand($expand: true) {
  @if $expand {
    display: block;
    margin-left: 0;
    margin-right: 0;
  }
  @else {
    display: inline-block;
    margin: $button-margin;
  }
}
@mixin button-style(
  $background: $button-background,
  $color: $button-color,
  $style: $button-style,
  $btngroup: false
){
  @if $style == hollow {
    border: 1px solid $background;
    background: transparent;
    color: $background;

    &:hover {
      border-color: scale-color($background, $lightness: 25%);
      background: transparent;
      color: scale-color($background, $lightness: 25%);
    }
    &[data-popup-toggle]::after {
      border-top-color: $background;
    }
  }
  // Solid is the default
  @else {
    @if $color == auto {
      $color: isitlight($background);
    }

    background: $background;
    color: $color;

    &:hover {
      background: scale-color($background, $lightness: -15%);
      color: $color;
    }
    &[data-popup-toggle]::after {
      border-top-color: $color;
    }
  }

  @if $btngroup {
    border-color: $background;
    &:hover {
      border-color: scale-color($background, $lightness: -25%);
    }
  }
}
@mixin button-disabled(
  $background: $button-background,
  $base: true
) {
  @if not $base {
    @extend %button-disabled;
  }
  &, &:hover {
    background: $background;
  }
}
@mixin button(
  $size: medium,
  $expand: false,
  $background: $button-background,
  $color: $button-color,
  $style: $button-style
) {
  @extend %button;
  @include button-size($size);
  @include button-expand($expand);
  @include button-style($background, $color, $style);
}

/*
  CSS Output
*/

.button {
  @include button;

  &.tiny   { @include button-size(tiny); }
  &.small  { @include button-size(small); }
  &.large  { @include button-size(large); }
  &.expand { @include button-expand; }

  &.secondary { @include button-style($secondary-color) }
  &.success   { @include button-style($success-color) }
  &.warning   { @include button-style($warning-color) }
  &.alert     { @include button-style($alert-color) }

  &.disabled { @include button-disabled;
    &.secondary { @include button-disabled($secondary-color, false) }
    &.success   { @include button-disabled($success-color, false) }
    &.warning   { @include button-disabled($warning-color, false) }
    &.alert     { @include button-disabled($alert-color, false) }
  }
}

@if $button-tag-selector {
  button {
    @extend .button;
  }
}
