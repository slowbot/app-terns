@import "panels";

/*
	THE GRID
  --------

  Foundation's magical, flexbox-powered grid.

  Features:
   - Horizontal or vertical grids
   - Auto-sizing or percentage width grid blocks
   - Independently-scrollable blocks
   - Column alignment
   - Source ordering
   - Offsets
*/

$container-width: rem-calc(1000) !default;
$block-padding: $global-padding !default;
$total-columns: 12 !default;

/*
  Define the size of a grid block. Blocks are flex items. By default, they stretch to fill all available space, based on the size of sibling blocks. This is the "expand" behavior.

  If set to "shrink", the block will contract and only fill as much space as it needs for its content.

  If set to a number, the block will be given a percentage width, based on the total number of columns (12 by default). Percentage widths don't work if a block is inside a vertical grid.

  @group grid

  @param {number|string} $size - Sizing behavior of the block. Should be expand, shrink, or a number.

  @output The flex-basis, flex-grow, and flex-shrink properties.
*/
@mixin grid-size($size: expand) {
	@if (type-of($size) == 'number') {
		flex: 0 0 percentage($size / $total-columns);
	}
	@else if ($size == shrink) {
		flex: 0 0 auto;
	}
	@else if ($size == expand) {
		flex: 1 1;
	}
}
/*
  Set the orientation of blocks within this block. The grid is re-oriented by changing the flex direction of the block.

  @group grid

  @param {string} $direction - Direction of the grid, either horizontal or vertical.

  @output A flex-flow property to match the direction given.
*/
@mixin grid-orient($direction: horizontal) {
	@if ($direction == vertical) {
		flex-flow: column nowrap;
		align-items: stretch;
	}
	@else {
		flex-flow: row wrap;
	}
}
/*
  Stretch a grid's child blocks across its cross-axis, making every column appear to have the same height.

  @group grid

  @param {bool} $stretch - Stretch blocks if true, or align blocks to top if false.

  @output Sets align-items to "stretch" if $stretch is true, or "flex-start" (the default value) if false.
*/
@mixin grid-stretch($stretch: true) {
	align-items: if($stretch, stretch, flex-start);
}
/*
  Set the alignment of blocks within a grid.

  left: Items align to the left.
  right: Items align to the right.
  center: Items align to the center.
  justify: Items are spaced equally apart so they occupy the space of the entire grid.
  spaced: Items are given equal space to their left and right.

  @group grid

  @param {string} $align - Alignment to use.

  @output An appropriate justify-content value.
*/
@mixin grid-align($align: left) {
	$options: (
		left: flex-start,
		right: flex-end,
		center: center,
		justify: space-between,
		spaced: space-around,
	);
	justify-content: map-get($options, $align);
}
/*
  Set the source order of a block. Items with lower numbers appear first. If multiple items have the same number, the one in the HTML first will appear first.

  @group grid

  @param {number} $order - Position in source order.

  @output An order property.
*/
@mixin grid-order($order: 0) {
	order: $order;
}
/*
  Collapse a content block by removing the padding.

  @group grid

  @param {bool} $collapse - Collapses the block if true.

  @output A padding value.

  @todo No way to reverse collapse using this mixin. Solution:
    - If true, add padding: 0;
    - If false, add padding: 1rem;
    - If null, add nothing, to cut down on CSS output
    - Make null the default value
*/
@mixin grid-collapse($collapse: true) {
	@if ($collapse) {
		padding: 0;
	}
}
/*
  Constrain the size of a block to the size of the average grid row, and center-align it. This imitates the behavior of ordinary Foundation rows.

  @group grid

  @param {bool} $container - Adds container styles if true.

  @output A maximum width and the good old margin: 0 auto for center alignment.
*/
@mixin grid-container($container: true) {
	@if ($container) {
		max-width: 1200px;
		margin: 0 auto;
	}
}
/*
  Add negative margins to a block, equal to the padding of a content block. This aligns the edges of a block nested inside a content block.

  @group grid

  @param {bool} $nest - Adds negative margins if true.

  @output Negative margin values.
*/
@mixin grid-nest($nest: true) {
	@if ($nest) {
		margin-left: -1rem;
		margin-right: -1rem;
	}
}
/*
  Offset a block by adding a left margin.

  @group grid

  @param {number | bool} $offset - If false, nothing is output. If a number, offsets the column by the specified number of columns.

  @output A left margin based on the number of columns specified, and the global number of columns.
*/
@mixin grid-offset($offset: false) {
	@if ($offset != false) {
		margin-left: percentage($offset / $total-columns);
	}
}

/*
	Frames are containers that stretch to the full dimmensions of the browser window.
*/
@mixin grid-frame($size: expand, $vertical: false, $stretch: false, $align: left, $order: 0) {
	display: flex;
	height: 100vh;
	position: relative;
	overflow: hidden;

	@include grid-size($size);
	@include grid-orient($vertical);
	@include grid-stretch($stretch);
	@include grid-align($align);
	@include grid-order($order);
}

/*
	Groups are collections of content items. They're the "rows" of Foundation for Apps.
*/
@mixin grid-block($size: expand, $vertical: false, $stretch: false, $align: left, $order: 0) {
	@include grid-frame($size, $vertical, $stretch, $align, $order);

	// Reset the height used by frames
	height: auto;

	// Blocks will scroll by default if their content overflows
	@if ($vertical) {
		overflow-x: auto;
	}
	@else {
		overflow-y: auto;
	}
	-webkit-overflow-scrolling: touch;
	-ms-overflow-style: -ms-autohiding-scrollbar;

	// These properties reset the panel styles
	transform: none;
	width: auto;
	height: auto;
	z-index: auto;
	box-shadow: none;
	background: transparent;
	top: auto;
	right: auto;
	bottom: auto;
	left: auto;
}

/*
	Blocks are containers for actual content. They're the "columns" of Foundation for Apps.
*/
@mixin grid-content($incl-block: false, $size: expand, $vertical: false, $stretch: false, $align: left, $order: 0, $collapse: false) {
	// Don't include the base block code by default
	@if ($incl-block) {
		@include grid-block($size, $vertical, $stretch, $align, $order);
		@include grid-collapse($collapse);
	}

	// Content blocks are not flex items and have padding
	display: block;
	padding: 1rem;
}

/*
	CSS Output
*/

.frame {
	@include grid-frame;
}
@mixin block-css {
	@include grid-block;

	// Content blocks are for content and not layout
	&.content { @include grid-content; }

	// Containers imitate the sizing of old Foundation rows
	&.container { @include grid-container(true); }

	// Collapse margins when a group is not the direct child of a block
	&.nested { @include grid-nest(true); }

	// Collapsed blocks strip padding from their children
	// ISSUE: now that groups and blocks are the same class, how does collapsing work?
	// This is a possible solution: "collapse" is for self, "collapse-children is for immediate children"
	&.collapse, .block.collapse-children > & { @include grid-collapse; }

	// Shrink a flex item so it only takes up the space it needs
	&.shrink { @include grid-size(shrink); }
}
.block, .small-block {
	@include block-css;
}
@include breakpoint(medium) {
	.medium-block { @include block-css; }
}
@include breakpoint(large) {
	.large-block { @include block-css; }
}

/*
	Shared styles for frames and blocks
*/
.frame, .block, .medium-block {
	// Orientation classes
	&.vertical, &.small-vertical { @include grid-orient(vertical); }
	@include breakpoint(medium) {
		&.medium-horizontal { @include grid-orient(horizontal); }
		&.medium-vertical   { @include grid-orient(vertical); }
	}
	@include breakpoint(large) {
		&.medium-horizontal { @include grid-orient(horizontal); }
		&.large-vertical    { @include grid-orient(vertical); }
	}

	// Block alignment
	&.align-right   { @include grid-align(right); }
	&.align-center  { @include grid-align(center); }
	&.align-justify { @include grid-align(justify); }
	&.align-spaced  { @include grid-align(spaced); }

	// Stretch children along cross-axis
	&.stretch { @include grid-stretch(true); }
}

/*
	Sizing and ordering classes
*/
$block-grid-max-size: 6;
@each $size, $breakpoint in ('small': $small-up, 'medium': $medium-up, 'large': $large-up) {
	@for $i from 1 through $total-columns {
		@include breakpoint($size) {
			// Block sizing
			.#{$size}-#{$i} {
				@include grid-size($i);
			}
			// Block ordering
			@at-root (without: media) {
				.order-#{$i} { @include grid-order($i); }
			}
			.#{$size}-order-#{$i} {
				@include grid-order($i);
			}
			// Offsets
			@if ($total-columns < 12) {
				.#{$size}-offset-#{$i} {
					@include grid-offset($i);
				}
			}
			// Parent sizing (block grids)
			// TODO: Make mixin
			.#{$size}-up-#{$i} {
				display: flex;
				overflow: visible;
				margin: {
					left:  -0.5rem;
					right: -0.5rem;
				}
				list-style-type: none;

			  > li, > div, > section {
			  	padding: 0 0.5rem 1rem;
			    flex: 0 0 percentage(1 / $i);
			  }
			}
		}
	}
}

// This prevents flicker when grid items shift around
.frame, .block {
	transition: all 300ms ease;
	backface-visibility: hidden;
}
